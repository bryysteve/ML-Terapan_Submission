# -*- coding: utf-8 -*-
"""ML_Terapan_Submission.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lobCwi4CMIS2zdFic04jWDFufNJd8HMC

# NAMA : BRYANT STEVEN ARITONANG
# ID DICODING : bryantarios
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import files
import numpy as np
import pandas as pd
from sklearn.utils import resample
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder

# Untuk visualisasi data
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

"""Load Dataset menggunakan library Pandas"""

import pandas as pd
df_insurance = pd.read_csv('insurance.csv')
df_insurance.head(10)

df_insurance

"""Cek Informasi Dataset"""

df_insurance.info() # mengecek informasi dari dataset

"""Cek Statistik Dataset"""

df_insurance.describe() # deskripsi stastitik data

"""Cari Missing Value"""

df_insurance.isnull().sum() # Find Missing Values in list Dataset

#Total Number of Missing NA
df_insurance.isnull().sum().sum()

"""#Explorisasi Data / Visualisasi Data

"""

sns.boxplot(x=df_insurance['age']) # Visualisasi data age pada fitur numerik

sns.boxplot(x=df_insurance['bmi']) # Visualisasi data bmi pada fitur numerik

sns.boxplot(x=df_insurance['children']) # Visualisasi data children pada fitur numerik

sns.boxplot(x=df_insurance['charges']) # Visualisasi data charges pada fitur numerik

"""Mengatasi Outlier"""

Q1 = df_insurance.quantile(0.25)
Q3 = df_insurance.quantile(0.75)
IQR=Q3-Q1
insurance=df_insurance[~((df_insurance<(Q1-1.5*IQR))|(df_insurance>(Q3+1.5*IQR))).any(axis=1)]

# Cek ukuran dataset setelah kita drop outliers
insurance.shape

"""Membagi dataset kedalam 2 Fitur yaitu Numerical dan Categorical"""

numerical_features = ['age','bmi','children','charges']
categorical_features = ['sex','smoker','region']

"""Grouping Fitur Categori"""

plt.subplots(2, 2, figsize=(20, 16))

for i, col in enumerate(categorical_features):
  plt.subplot(2, 2, i + 1)
  if col == 'smoker':
    df_insurance.groupby(col).size().plot(kind='bar', rot=45)
  else:
    df_insurance.groupby(col).size().plot(kind='bar', rot=0)

"""Visualisasi Fitur Categorical"""

feature = categorical_features[0]
count = df_insurance[feature].value_counts()
percent = 100*df_insurance[feature].value_counts(normalize=True)
df1 = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df1)
count.plot(kind='bar', title=feature);

feature1 = categorical_features[1]
count1 = df_insurance[feature1].value_counts()
percent1 = 100*df_insurance[feature1].value_counts(normalize=True)
df2 = pd.DataFrame({'jumlah sampel':count1, 'persentase':percent1.round(1)})
print(df2)
count1.plot(kind='bar', title=feature1);

feature1 = categorical_features[2]
count1 = df_insurance[feature1].value_counts()
percent1 = 100*df_insurance[feature1].value_counts(normalize=True)
df3 = pd.DataFrame({'jumlah sampel':count1, 'persentase':percent1.round(1)})
print(df3)
count1.plot(kind='bar', title=feature1);

"""Visualisasi Fitur Numerical"""

df_insurance.hist(bins=50, figsize=(20,15))
plt.show()

"""**Multivariate Analysis**
- Categorical Features

Dalam langkah ini, kita akan memeriksa rata-rata charges untuk setiap fitur guna menilai dampak fitur kategori terhadap charges.
"""

cat_features = df_insurance.select_dtypes(include='object').columns.to_list()

for col in cat_features:
  sns.catplot(x=col, y="charges", kind="bar", dodge=False, height = 4, aspect = 3,  data=df_insurance, palette="Set3")
  plt.title("Rata-rata 'charges' Relatif terhadap - {}".format(col))

"""- Numerical Features


Untuk mengamati keterkaitan antara fitur numerik, kita akan menggunakan fungsi pairplot(). Selain itu, kita akan mengamati korelasi antara fitur numerik dan fitur target melalui fungsi corr().
"""

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(df_insurance, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = df_insurance.corr().round(2) # Fungsi Cor -> evaluasi skor korelasi

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

df_insurance.drop(['bmi'], inplace=True, axis=1)
df_insurance.head()

"""#Data Preparation

Penanganan category fitur dengan menggunakan One Hot Encoding
"""

from sklearn.preprocessing import  OneHotEncoder
df_insurance = pd.concat([df_insurance, pd.get_dummies(df_insurance['sex'], prefix='sex')],axis=1)
df_insurance = pd.concat([df_insurance, pd.get_dummies(df_insurance['smoker'], prefix='smoker')],axis=1)
df_insurance = pd.concat([df_insurance, pd.get_dummies(df_insurance['region'], prefix='region')],axis=1)
df_insurance.drop(['sex','smoker','region'], axis=1, inplace=True)
df_insurance.head()

sns.pairplot(df_insurance[['age','children','charges']], plot_kws={"s":3});

df_insurance.head()

"""Menggunakan Teknik PCA yang bertujuan untuk mengurangi reduksi dimensi saat dilakukan modelling"""

from sklearn.decomposition import PCA

pca = PCA(n_components=3, random_state=123)
pca.fit(df_insurance[['age','children','charges']])
princ_comp = pca.transform(df_insurance[['age','children','charges']])

print(pca)

pca.explained_variance_ratio_.round(3)

print (df_insurance)

"""Lakukan Split Dataset 80:20"""

from sklearn.model_selection import train_test_split

X = df_insurance.drop(["charges"],axis =1)
y = df_insurance["charges"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""Melakukan proses Standarisasi"""

from sklearn.preprocessing import StandardScaler

numerical_features = ['age','children']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""Menyiapkan Dataframe untuk Analisis Model"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'Boosting','SVM'])

"""**KNN**"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""**RANDOM FOREST**"""

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""**BOOSTING**"""

from sklearn.ensemble import AdaBoostRegressor
from sklearn.metrics import mean_squared_error

boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""**SVR**"""

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

svm= SVR()
svm.fit(X_train, y_train)
models.loc['train_mse','svm'] = mean_squared_error(y_pred=svm.predict(X_train), y_true=y_train)

"""Melakukan Proses Scalling Fitur Numerik"""

# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""Persiapan dan Perhitungan MSE"""

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting','svm'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting,'svm':svm}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))
 # Panggil mse
mse

"""Visualisasi Hasil Perhitungan MSE"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Hasil Prediksi berdasarkan Perhitungan MSE"""

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)